// Package router provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package router

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new account
	// (POST /accounts)
	CreateAccount(ctx echo.Context) error
	// Perform authentication and receive a jwt token
	// (POST /accounts/actions/login)
	AccountLogin(ctx echo.Context) error
	// Start a new game
	// (POST /games)
	CreateGame(ctx echo.Context) error
	// Shoot
	// (POST /games/{id}/actions/shoot)
	GameShoot(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// AccountLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AccountLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountLogin(ctx)
	return err
}

// CreateGame converts echo context to params.
func (w *ServerInterfaceWrapper) CreateGame(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateGame(ctx)
	return err
}

// GameShoot converts echo context to params.
func (w *ServerInterfaceWrapper) GameShoot(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GameShoot(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/accounts", wrapper.CreateAccount)
	router.POST(baseURL+"/accounts/actions/login", wrapper.AccountLogin)
	router.POST(baseURL+"/games", wrapper.CreateGame)
	router.POST(baseURL+"/games/:id/actions/shoot", wrapper.GameShoot)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWwW7jNhD9FWLaoxA5221R6JYUaJBFgAbrFj0EPtDURGZWIrXkMI5h6N+LoWhFsuU0",
	"hwboTaKGw8f3Hh+1h7X0eC9pAwXkz5eQgbJNaw0a8lDswasNNjI+3ltPV0rZYMh/xe8BPfFw62yLjjTG",
	"otpW2vBDo80dmoob/5wB7VqEAjw5bSroMmil91vryqPSX09Kuwwcfg/aYQnFQ+o/mr8aZtj1Eyri5lOk",
	"vrXG4ylUHRc/QTbs4G0guoRD7TkIN7LBK0XamuXGWjrLmbJ1okE3oYFiMfTThrBCxw2d3f5b0RFCnpHF",
	"5ucA3jH8/7+UCeY5HfGl1Q79VdxCiV453TLpUMBfRr8I0g0KbUTjIYNH6xpJPWu/fIY5psl+w3cYoC/L",
	"RsvP4nd2XWPzxVtzirzEdahmTVgiSV3PfvIkKfjRpzF0TTW+A3osG1oNy51ugNdDFZym3ZKToMd9jdKh",
	"uwos8x7W8e33A7Ff/v6TW8dqKNLXV6I3RC103Hhj2XVQWyXr+JyBNo/2VMUlhXIHw+7gxoprSVSj3+gW",
	"MnhG5/vKy4vFxYKJsC0a2WooIBqMNhF3LlMoRClsb3oWRPJKtyUU8JtDSZjCA3ra0NO1LXf9UTWEJs6T",
	"bVtrFWfmT0nePi356UeHj1DAD/lrnOYpS/O5IO2mGpELGAd600fAnxaXHwQhnayIYUp9qhEq0lIKH5RC",
	"7x9DXe+Y58+LxX+HaXRUZqDcmmdZ61Jo04apM6F4WGXgQ9NItxs0FFIY3Ao5SEmy8uz+w8iKewyWyGVM",
	"ap8PsTdvkMTIXQqvj/LHJJrfZY7FR6x/3hnLkRNEbasKWZreEz+dnuFbo6xzqEgEj05YJ4bYf0vKe3Sc",
	"2EIG2qChtB8hTSkcKtTPLPPTlsQhjedFrmRKrrcOPV/XMH/mpnvpyxPwAeqSpKNkuqpvdQATX0dI8r0u",
	"u8Fwnn8OzoNjWPH/ISaZkw0SOm57DOsrehucQhF/TdjDMfkgAyNjFMfxqY2ykSVGd/fl6d29+jivn/lP",
	"er/rpzz88e1YmcTesRzd4ZqKo3wxeb4CR16cXnUPK2bBb2XF120Bny4Wr12PUdxEyw3c9w7ssv18wL4W",
	"Hozbrbp/AgAA//9uX6EBnQsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
