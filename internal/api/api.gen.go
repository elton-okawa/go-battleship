// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new account
	// (POST /accounts)
	CreateAccount(ctx echo.Context) error
	// Perform authentication and receive a jwt token
	// (POST /accounts/actions/login)
	AccountLogin(ctx echo.Context) error
	// Start a new game
	// (POST /games)
	CreateGame(ctx echo.Context) error
	// Shoot
	// (POST /games/{id}/actions/shoot)
	GameShoot(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// AccountLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AccountLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountLogin(ctx)
	return err
}

// CreateGame converts echo context to params.
func (w *ServerInterfaceWrapper) CreateGame(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateGame(ctx)
	return err
}

// GameShoot converts echo context to params.
func (w *ServerInterfaceWrapper) GameShoot(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GameShoot(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/accounts", wrapper.CreateAccount)
	router.POST(baseURL+"/accounts/actions/login", wrapper.AccountLogin)
	router.POST(baseURL+"/games", wrapper.CreateGame)
	router.POST(baseURL+"/games/:id/actions/shoot", wrapper.GameShoot)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVTW/jNhD9K8S0RzWS0xYodHMKNEgRYIN4gT0EPjDUWGIikQo5stcw9N8XQ9HydzaX",
	"AHuj6ZmnxzdvZjbwLD0+SKogh3Q5gQSUbVpr0JCHfANeVdjIcHywnqZK2c6Qf8S3Dj3xdetsi440hqDa",
	"ltrwodHmHk3JwH8nQOsWIQdPTpsS+gRa6f3KuuIo9J+T0D4Bh2+ddlhA/hTx9/LnY4Z9fkFFDM5Mb2WD",
	"U0XamlllLV0krGwdOeimayDPRjxtCEt0DOjs6mdBRzw5Iwnglwje80t+fR0jTd9a4/GUJ35vtUM/DU9Y",
	"WNdIghwKSfgH6QbhDGWyrxie9j7DISzZ+8IpxT4Bj6pzmtYzNurA6QalQzftWIgNPIdf/22p/f/tKySD",
	"rRlp+HdHsyJqoWfgynJdoLZK1uGcgDYLy5AFeuV0y+aCHGbUFWtG0FQzxK0VN5KoRl/pFhJYovND5OQq",
	"u8pYAtuika2GHEIJqAq8Uxm7K8hsB1uw2JK/dFdADv86lISxC2EQDD3d2GI9mNkQmpAn27bWKmSmL96a",
	"XTPz6XeHC8jht3TX7Wls9fRcn/eH1SHXYbgYbBEIX2eTU20ijlCBdyF8pxR6v+jqes1C/JVlp0l3Zilr",
	"XQht2u6wyJA/zRPwXdNItx7lEFIYXAk5qkKy9Gyh7c2cMUZ1UxnGgk/HHjuvdeR+Hzvls6Q+mAMf0jn7",
	"jO/HBg8Ejvy9VzNR27JELs1QvT/PVU9Z51CR6Dw6YZ0YZ8x7pXxAx+NDyI4qNBTfI6QphEOFesllflmR",
	"2M6F80UuZRwC7/UP7wb4iH2H8Eh8pDoj6SiarhygtmTCzz0m6UYX/Wg4z5voMjmmFZZVGApONkjoGPaY",
	"1iN62zmFQhdhKkEehggkYGSYauH+0EbJniX2FsXkdFHMP8/rF5byx11/qMOX1+PKRPWOy9FvJ3645Rnv",
	"eZvsefFwazzNWQW/kiXv9hyur7Id6jGL22C5UfvBgX1yYRTuArfG7ef9jwAAAP//ngezRIcJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
