// Package Api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package Api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// PostAccountsRequest defines model for PostAccountsRequest.
type PostAccountsRequest struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// PostGameActionShootRequest defines model for PostGameActionShootRequest.
type PostGameActionShootRequest struct {
	Col int `json:"col"`
	Row int `json:"row"`
}

// PostLoginRequest defines model for PostLoginRequest.
type PostLoginRequest struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// PostLoginResponse defines model for PostLoginResponse.
type PostLoginResponse struct {
	ExpiresAt time.Time `json:"expiresAt"`
	Token     string    `json:"token"`
}

// CreateAccountJSONBody defines parameters for CreateAccount.
type CreateAccountJSONBody PostAccountsRequest

// AccountLoginJSONBody defines parameters for AccountLogin.
type AccountLoginJSONBody PostLoginRequest

// GameShootJSONBody defines parameters for GameShoot.
type GameShootJSONBody PostGameActionShootRequest

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody CreateAccountJSONBody

// AccountLoginJSONRequestBody defines body for AccountLogin for application/json ContentType.
type AccountLoginJSONRequestBody AccountLoginJSONBody

// GameShootJSONRequestBody defines body for GameShoot for application/json ContentType.
type GameShootJSONRequestBody GameShootJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new account
	// (POST /accounts)
	CreateAccount(ctx echo.Context) error
	// Perform authentication and receive a jwt token
	// (POST /accounts/actions/login)
	AccountLogin(ctx echo.Context) error
	// Start a new game
	// (POST /games)
	CreateGame(ctx echo.Context) error
	// Shoot
	// (POST /games/{id}/actions/shoot)
	GameShoot(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// AccountLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AccountLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountLogin(ctx)
	return err
}

// CreateGame converts echo context to params.
func (w *ServerInterfaceWrapper) CreateGame(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateGame(ctx)
	return err
}

// GameShoot converts echo context to params.
func (w *ServerInterfaceWrapper) GameShoot(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GameShoot(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/accounts", wrapper.CreateAccount)
	router.POST(baseURL+"/accounts/actions/login", wrapper.AccountLogin)
	router.POST(baseURL+"/games", wrapper.CreateGame)
	router.POST(baseURL+"/games/:id/actions/shoot", wrapper.GameShoot)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVwW7bMAz9FYHb0audbgMG39odigIFVrTHIQdVZmy1tqRKdLKg8L8PlB0ncZK1lwC7",
	"2QJJPT6+R73Bkwx4L6mCHNLlDBJQtnHWoKEA+RsEVWEj4+e9DXSllG0NhQd8bTEQHztvHXrSGINqW2rD",
	"H402d2hKLvw9AVo7hBwCeW1K6BJwMoSV9cUk9MdBaJeAx9dWeywg/z3U38mfjxn26RkVcXFGeiMbvFKk",
	"rXmsrKWTgJWtBwy6aRvIs7GeNoQlei7o7eq9oAlOzkhi8VMA77iT/5/HAWZw1gQ8xIl/nPYYrmILC+sb",
	"SZBDIQm/kG4QjkAm+4KxtX8j7MOSnRsOIXJOZZk/qK2SdfxOQJuF5QsKDMprxyKAHB6pLdYMSFPNRW6s",
	"uJZENYZKO0hgiT70kbOL7CJjqNahkU5DDpEqqmLPqRxcEOmw/fiYFMk33RaQw0+PknBwC/SNYaBrW6x7",
	"0RlCE/Okc7VWMTN9DtZsTcdfnz0uIIdP6daV6WDJ9Jgfu30WybcYD/rxRcCX2eyQm6GOUBF3IUKrFIaw",
	"aOt6zUR8y7LDpFuzlLUuhDaupTi/0DaN9OuRACGFwZWQIw8ky8DD3ZzMOWvkM5XRsCEd1X+c3QHt3aDh",
	"c5G759APMZud4/7BehHARNE7UxK1LUvkYfTz+npsXsp6j4pEG9AL68Xo/v3h3aNnKwvZUoWGhg6ENIXw",
	"qFAvebDPKxIbjx4faykbfNcjvKfhIxLtw6dQH0l6GmRW9qU2YOLvDpL0TRfdKLHAr8JpcAwrPhzR+F42",
	"SOi57BTWAwbbeoVCF3HzQB4XBSRg+P4c4vm+cJIdEews7dnh0p6fT90nHsiP63yfh18v08kM7E3H0Q3d",
	"YzytiFzgzR5WsuSHNIfLi2ybNr3mJmpqJLeXWJec2GfbwI0yu3n3NwAA//8kGyyz9AgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

